package com.inetbank.utilities;

//Listener class used to generate Extent reports

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.TestListenerAdapter;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

import ExtendreportDemo.nopcommerce;

public class Reporting extends TestListenerAdapter
{
	public ExtentHtmlReporter htmlReporter;
	public ExtentReports extent;
	public ExtentTest test;
	
		
	public void onStart(ITestContext testContext)
	{
		String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());//time stamp
		String repName="Test-Report-"+timeStamp+".html";
		
		   htmlReporter=new ExtentHtmlReporter(System.getProperty("user.dir")+"/test-output/myreport.html");
		   htmlReporter.config().setDocumentTitle("Automation Report");
		   htmlReporter.config().setReportName("Functional Report");
		   htmlReporter.config().setTheme(Theme.DARK);
		   
		   extent=new ExtentReports();
		   extent.attachReporter(htmlReporter);
		   
		   extent.setSystemInfo("Hostname", "LocalHost");
		   extent.setSystemInfo("OS", "Windows10");
		   extent.setSystemInfo("Tester", "Aasif");
		   extent.setSystemInfo("Browser", "Chrome"); 
	}
	
	public void onTestSuccess(ITestResult tr)
	{
		logger=extent.createTest(tr.getName()); // create new entry in th report
		logger.log(Status.PASS,MarkupHelper.createLabel(tr.getName(),ExtentColor.GREEN)); // send the passed information to the report with GREEN color highlighted
	}
	
	public void onTestFailure(ITestResult tr)
	{
		{
			if(result.getStatus()==ITestResult.FAILURE) {
			   test.log(Status.FAIL, "TEST CASE FAILED IS"+result.getName());
			   test.log(Status.FAIL, "TEST CASE FAILED IS"+result.getThrowable());
			   
			   String screenshotPath=nopcommerce.getScreenshot(driver,result.getName());
			   test.addScreenCaptureFromPath(screenshotPath);
			}
			else if(result.getStatus()==ITestResult.SKIP) {
				test.log(Status.SKIP, "Test Case SKIPPED IS"+result.getName());
			}
			else if(result.getStatus()==ITestResult.SUCCESS) {
				test.log(Status.PASS, "Test Case PASSED IS"+result.getName());
			}
			driver.quit();
			
		}
		
		public static String getScreenshot(WebDriver driver, String screenshotName) throws IOException {
			String dateName=new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
			TakesScreenshot ts= (TakesScreenshot) driver;
			File source=ts.getScreenshotAs(OutputType.FILE);
			
			String destination=System.getProperty("user.dir")+ "/Screenshots/"+ screenshotName + dateName + ".png";
			File finalDestination=new File(destination);
			FileUtils.copyFile(source,finalDestination);
			return destination;
		}
		
	}
	
	public void onTestSkipped(ITestResult tr)
	{
		logger=extent.createTest(tr.getName()); // create new entry in th report
		logger.log(Status.SKIP,MarkupHelper.createLabel(tr.getName(),ExtentColor.ORANGE));
	}
	
	public void onFinish(ITestContext testContext)
	{
		extent.flush();
	}
	
	String dateName=new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
	TakesScreenshot ts= (TakesScreenshot) driver;
	File source=ts.getScreenshotAs(OutputType.FILE);
	
	String destination=System.getProperty("user.dir")+ "/Screenshots/"+ screenshotName + dateName + ".png";
	File finalDestination=new File(destination);
	FileUtils.copyFile(source,finalDestination);
	return destination;
}
